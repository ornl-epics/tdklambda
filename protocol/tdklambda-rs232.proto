#
# TDKLambda Genesys RS-232 Interface stream device protocol file
#

Terminator  = CR;
LockTimeout   = 1000;
ReplyTimeout  = 1000;
WriteTimeout  = 1000;

# TDK-Lambda Genesys 10KW/15KW Programmable DC Power Supply

debug {
    ExtraInput = Ignore;
    out "%s";
    in "%39c";
}

##################
#####################    Inititialization Control
##################

# Define the Address of the Unit to initiate communications - this must run first
PSU-adr	{
    out "ADR %02d";
    wait 10;
    in "%(\$1:CommandACK.VAL)s";
    @init {
        out "ADR %02d";
        wait 10;
        in "%(\$1:CommandACK.VAL)s";
    };
}

# Clear the status registers
PSU-cls {
    out "CLS";
    in "%(\$1:CommandACK.VAL)s";
}

# Send a Reset to the unit
PSU-reset {
    out "RST";
    in "%(\$1:CommandACK.VAL)s";
}

# Get the Operating Mode: remote, local or local lockout
PSU-get.rmt {
    out "RMT?";
    wait 10;
    in "%{LOC|REM|LLO}";
}

# Set the unit to local, remote or local lockout mode
PSU-set.rmt {
    out "RMT %{LOC|REM|LLO}";
    wait 10;
    in "%(\$1:CommandACK.VAL)s";
    @init {PSU-get.rmt;};
}

##################
##################### Identitification Control
##################

#
# These 4 commands only run once during startup
#

# Identify the Units Model Number
PSU-idn
{
    @init{ out "IDN?"; in "%s"; };
}

# Get the Software Version
PSU-rev
{
    @init{ out "REV?"; in "%s"; };
}

# Get the Serial Number
PSU-sn
{
    @init{ out "SN?"; in "%s"; };
}

# Get the last time the system was calibrated
PSU-date
{
    @init{ out "DATE?"; in "%s"; };
}

##################
#####################    Output Control
##################

# Get the Voltage value (SV) from the unit
PSU-get.v
{
    out "PV?";
    wait 10;
    in "%f";
}

# Get the measured (actual) Voltage
PSU-meas.v
{
    out "MV?";
    wait 10;
    in "%f";
}

# Set the Voltage - load response time is ~100mS
PSU-set.v
{
    out "PV %f";
    wait 10;
    in "%(\$1:CommandACK.VAL)s";
    @init {PSU-get.v;};
}

# -----------
# Get the Current value (SV) from the unit
PSU-get.c
{
    out "PC?";
    wait 10;
    in "%f";
}

# Get the measured (actual) Current
PSU-meas.c
{
    out "MC?";
    wait 10;
    in "%f";
}

# Set the current - loaded response time is ~100mS
PSU-set.c
{
    out "PC %f";
    wait 10;
    in "%(\$1:CommandACK.VAL)s";
    @init {PSU-get.c;};
}

# -----------
# Get the output status
PSU-get.out {
    out "OUT?";
    wait 10;
    in "%{OFF|ON}";
}

# Set the output state
PSU-set.out
{
    out "OUT %{0|1}";
    wait 10;
    in "%(\$1:CommandACK.VAL)s";
    @init {PSU-get.out;};
}

# -----------
# Get the Filter value
PSU-get.fltr
{
    out "FILTER?";
    wait 10;
    in "%{18|23|46}";
}

# Set the Filter
PSU-set.fltr
{
    out "FILTER %{18|23|46}";
    wait 800; # This command takes a long time to complete
    in "%(\$1:CommandACK.VAL)s";
    @init { PSU-get.fltr; }; 
}

# -----------
# Get Foldback Status
PSU-get.fld
{
    out "FLD?";
    wait 10;
    in "%{OFF|ON}";
}

# Set the Foldback state
PSU-set.fld
{
    out "FLD %{ 0| 1}";
    wait 10;
    in "%(\$1:CommandACK.VAL)s";
    @init {PSU-get.fld;};
}

# Get Foldback Delay
PSU-get.fbd
{
    out "FBD?";
    wait 10;
    in "%d";
}

# Set the Foldback Delay
PSU-set.fbd
{
    out "FBD %d";
    wait 10;
    in "%(\$1:CommandACK.VAL)s";
    @init {PSU-get.fbd;};
}

# Reset the Foldback Delay
PSU-reset.fbd {
    out "FBDRST";
    wait 10;
    in "%(\$1:CommandACK.VAL)s";
    @init {PSU-get.fld;};
}

# -----------
# Get the Overvoltage
PSU-get.ovp {
    out "OVP?";
    wait 10;
    in "%f";
}

# Set the Overvoltage
PSU-set.ovp {
    out "OVP %f";
    wait 20;
    in "%(\$1:CommandACK.VAL)s";
}

# -----------
# Get the Undervoltage
PSU-get.uvl {
    out "UVL?";
    wait 10;
    in "%f";
}

# Set the Undervoltage
PSU-set.uvl {
    out "UVL %f";
    wait 10;
    in "%(\$1:CommandACK.VAL)s";
}


# -----------
# Get the Auto-Restart Mode
PSU-get.ast {
    out "AST?";
    wait 10;
    in "%{OFF|ON}";
}

# Set the Auto-Restart Mode
PSU-set.ast {
    out "AST %{0|1}";
    wait 10;
    in "%(\$1:CommandACK.VAL)s";
    @init {PSU-get.ast;};
}


# -----------
# Get the Operation Mode
PSU-get.mode {
    out "MODE?";
    wait 10;
    in "%s";
}

##################
#####################    Fault Conditions
##################

# Get the Fault Condition Register Values
PSU-get.flt {
    out "FLT?";
    wait 10;
    in "%u";
}

# Get which Fault Condition Registers are Enabled
PSU-get.fena {
    out "FENA?";
    wait 10;
    in "%X";
}

# Set which Fault Condition Registers are Enabled
PSU-set.fena {
    out "FENA %02X";
    in "%(\$1:CommandACK.VAL)s";
    @init {PSU-get.fena;};
}

# Get the Status Register Values
PSU-get.status {
    out "STAT?";
    wait 10;
    in "%u";
}

# Get Status Register Bits Enabled
PSU-get.stat {
    out "SENA?";
    wait 10;
    in "%X";
}

# Enable the Fault Condition Registers
PSU-set.stat {
    out "SENA %02X";
    in "%(\$1:CommandACK.VAL)s";
    @init {PSU-get.stat;};
}
