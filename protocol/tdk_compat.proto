#OutTerminator = ";";
Terminator  = LF;
LockTimeout   = 1000;
ReplyTimeout  = 1000;
WriteTimeout  = 1000;

# modified to run under agilent N5700 series
#
# genesys.proto (stream device protocol file)
#
# Genesys/Agilent/Lambda DC Power Supply
# default settings
# Output: Off
# Startup Mode: Safe Start
# TCP/IP
# OVP: Maximum
# Vout Setting: 0
# UVL: 0
# Iout Setting: Maximum
# Foldback: Off


# Connect a stringout record to this to get
# a generic command interface.
# After processing finishes, the record contains the reply.
debug {
    ExtraInput = Ignore;
    out "%s"; in "%39c"}


PSU-set {out "%s";                                 }
PSU-get {out "%s"; ExtraInput = Ignore; in "%39c"; }
#
versionstring {
    out "*IDN?";
    in  "%(\$1:Chassis.VAL)[^,],"
        "%(\$1:PSType.VAL)[^,],"
        "%(\$1:SerialNumber.VAL)[^,],"
        "%(\$1:FWVersion.VAL)[^,]";
}

# Initialisation Control Commands
PSU-errclr        { out "*CLS";                                      }
PSU-reset         { out "*RST";                                      }
#
# Output Control Commands - Voltage
PSU-getsetvolts   { out "SOUR:VOLT?";           in "%f";             }
PSU-setvolts      { out "SOUR:VOLT %f";
#			@init { PSU-getsetvolts; }                
		  }
PSU-getvolts      { out "MEAS:VOLT?";           in "%f";             }
PSU-setovervolts  { out "SOUR:VOLT:PROT:LEV %f";                     }
PSU-getovervolts  { out "SOUR:VOLT:PROT:LEV?";  in "%f";             }
PSU-setundervolts { out "SOUR:VOLT:LIM:LOW %f";                      }
PSU-getundervolts { out "SOUR:VOLT:LIM:LOW?";   in "%f";             }
# Output Control Commands - Current
PSU-getsetcur     { out "SOUR:CURR?";           in "%f";             }
PSU-setcur        { out "SOUR:CURR %f";
#			@init { PSU-getsetcur;   }                
		  }
PSU-getcur        { out "MEAS:CURR?";           in "%f";             }

# not supported by agilent
#PSU-setfoldback   { out "SOUR:CURR:PROT:STAT %{OFF|ON}";             }
#PSU-getfoldback   { out "SOUR:CURR:PROT:STAT?"; in "%{OFF|ON}";      }
#PSU-getfbtrip 	  { out "SOUR:CURR:PROT:TRIP?"; in "%{0|1}";         }

# State Commands
PSU-setonoff      { out "OUTP:STAT %{OFF|ON}";                       }
PSU-getonoff      { out "OUTP:STAT?";           in "%{0|1}";      }

# Status Control Commands
PSU-setcomm       { out "SYST:COMM:RLSTate %{LOC|REM|RWL}";                   }
PSU-getcomm       { out "SYST:COMM:RLSTate?";   in "%{LOC|REM|RWL}"; }
PSU-geterror      { out "SYST:ERR?"; ExtraInput = Ignore; in "%39c"; }
# not supported by agilent
#PSU-getaddr       { out "SYST:COMM:LAN:IP?";    in "%s";             }
#PSU-getmode       { out "SOUR:MODE?";           in "%{CV|CC|OFF}";   }
PSU-setstart      { out "OUTP:PON %{RST|AUTO}";                        }
PSU-getstart      { out "OUTP:PON?";            in "%{RST|AUTO}";      }
PSU-setquesevt    { out "STAT:QUES:ENAB %d";                         }
PSU-getques       { out "STAT:QUES:COND?";      in "%d";             }
PSU-getquesevt    { out "STAT:QUES:EVEN?";      in "%d";             }
PSU-setcondevt    { out "STAT:OPER:ENAB %d";                         }
PSU-getcond       { out "STAT:OPER:COND?";      in "%d";             }
PSU-getcondevt    { out "STAT:OPER:EVEN?";      in "%d";             }
PSU-setevt        { out "*ESE %d";                                   }
PSU-getevt        { out "*ESR?";                in "%d";             }
PSU-getstb        { out "*STB?";                in "%d";             }
